datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bot {
  id      Int      @id @default(autoincrement())
  name    String   @unique() 
  body    String
  token   String
  sms     SMS[]    @relation("BotSMS")
  type    String  // 1: telegram 2: lark
  userId  String
  rule    String?
  BotSMS  BotSMS[]
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model SMS {
  id     Int      @id @default(autoincrement())
  name   String   @unique() 
  token  String
  bot    Bot[]    @relation("BotSMS")
  userId String
  BotSMS BotSMS[]
  rule    String?
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model BotSMS {
  botId Int
  smsId Int
  sms   SMS @relation(fields: [smsId], references: [id])
  bot   Bot @relation(fields: [botId], references: [id])

  @@id([smsId, botId])
  @@index([smsId])
  @@index([botId])
}


model Log {
  id      Int      @id @default(autoincrement())
  body    String   @db.Text
  smsId   Int
  smsName String
  created DateTime @default(now())
  updated DateTime @updatedAt
  userId  String
  info    LogDetail[]
}

model LogDetail {
  id      Int      @id @default(autoincrement())
  logId   Int
  botId   Int
  botName String
  message String   @db.Text
  status  Int
  created DateTime @default(now())
  updated DateTime @updatedAt
  userId  String
  log     Log @relation(fields: [logId], references: [id])

  @@index([logId])
}
